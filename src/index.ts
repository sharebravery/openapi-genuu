/* eslint-disable global-require */
/* eslint-disable import/no-dynamic-require */
import http from 'http';
import https from 'https';
import fetch from 'node-fetch';
import type { OperationObject } from 'openapi3-ts';
import type { SchemaObject } from 'openapi3-ts';
import converter from 'swagger2openapi';
import Log from './log';
import { mockGenerator } from './mockGenerator';
import { sanitizeSchema } from './sanitizer';
import { ServiceGenerator } from './serviceGenerator';

const getImportStatement = (requestLibPath: string) => {
  if (requestLibPath && requestLibPath.startsWith('import')) {
    return requestLibPath;
  }
  if (requestLibPath) {
    return `import request from '${requestLibPath}'`;
  }
  return `import { request } from "umi"`;
};

export type GenerateServiceProps = {
  requestLibPath?: string;
  requestImportStatement?: string;
  /**
   * api ÁöÑÂâçÁºÄ
   */
  apiPrefix?:
  | string
  | ((params: {
    path: string;
    method: string;
    functionName: string;
    autoExclude?: boolean;
  }) => string);
  /**
   * ÁîüÊàêÁöÑÊñá‰ª∂Â§πÁöÑË∑ØÂæÑ
   */
  serversPath?: string;
  /**
   * Swagger 2.0 Êàñ OpenAPI 3.0 ÁöÑÂú∞ÂùÄ
   */
  schemaPath?: string;
  /**
   * È°πÁõÆÂêçÁß∞
   */
  projectName?: string;

  hook?: {
    /** Ëá™ÂÆö‰πâÂáΩÊï∞ÂêçÁß∞ */
    customFunctionName?: (data: OperationObject) => string;
    /** Ëá™ÂÆö‰πâÁ±ªÂûãÂêçÁß∞ */
    customTypeName?: (data: OperationObject) => string;
    /** Ëá™ÂÆö‰πâÁ±ªÂêç */
    customClassName?: (tagName: string) => string;
  };

  /**
   * ÈªòËÆ§‰∏∫falseÔºåtrueÊó∂‰ΩøÁî®null‰ª£ÊõøÂèØÈÄâ
   */
  nullable?: boolean;

  mockFolder?: string;
  /**
   * Ê®°ÊùøÊñá‰ª∂ÁöÑÊñá‰ª∂Ë∑ØÂæÑ
   */
  templatesFolder?: string;

  /**
   * Êûö‰∏æÊ†∑Âºè
   */
  enumStyle?: 'string-literal' | 'enum';

  /**
   * response‰∏≠Êï∞ÊçÆÂ≠óÊÆµ
   * example: ['result', 'res']
   */
  dataFields?: string[];

  /**
   * ÊòØÂê¶ÁîüÊàê‰∏•Ê†ºÁöÑÁ±ªÂûãÂÆö‰πâ
   */
  strictTypes?: boolean;

  /**
   * ÊòØÂê¶‰ΩøÁî® interface ËÄå‰∏çÊòØ class
   */
  useInterface?: boolean;

  /**
   * Ëá™ÂÆö‰πâÂìçÂ∫îÁ±ªÂûãÂåÖË£ÖÂô®
   */
  responseWrapper?: string;

  /**
   * ÊîØÊåÅÂøΩÁï•ÁöÑË∑ØÂæÑÂâçÁºÄÔºàÂ¶Ç /api/v1/ÔºâÔºåÁî®‰∫éÊñπÊ≥ïÂêçÁîüÊàê
   */
  ignorePathPrefix?: string | RegExp;
};

const converterSwaggerToOpenApi = (swagger: any) => {
  if (!swagger.swagger) {
    return swagger;
  }
  return new Promise((resolve, reject) => {
    converter.convertObj(swagger, {}, (err, options) => {
      Log(['üí∫ Â∞Ü Swagger ËΩ¨Âåñ‰∏∫ openAPI']);
      if (err) {
        reject(err);
        return;
      }
      resolve(options.openapi);
    });
  });
};

export const getSchema = async (schemaPath: string) => {
  if (schemaPath.startsWith('http')) {
    const protocol = schemaPath.startsWith('https:') ? https : http;
    try {
      const agent = new protocol.Agent({
        rejectUnauthorized: false,
      });
      const json = await fetch(schemaPath, { agent }).then((rest) => rest.json());
      return json;
    } catch (error) {
      // eslint-disable-next-line no-console
      console.log('fetch openapi error:', error);
    }
    return null;
  }
  const schema = require(schemaPath);
  return schema;
};

const getOpenAPIConfig = async (schemaPath: string) => {
  const schema = await getSchema(schemaPath);
  if (!schema) {
    return null;
  }
  const openAPI = await converterSwaggerToOpenApi(schema);
  return openAPI;
};

// ‰ªé appName ÁîüÊàê service Êï∞ÊçÆ
export const generateService = async ({
  requestLibPath,
  schemaPath,
  mockFolder,
  nullable = false,
  ...rest
}: GenerateServiceProps) => {
  const openAPI = await getOpenAPIConfig(schemaPath);

  // Ê∏ÖÁêÜ schema ‰∏≠ÁöÑ HTML ÂÆû‰Ωì
  const sanitizedOpenAPI = sanitizeSchema(openAPI);

  let patchedOpenAPI = sanitizedOpenAPI;

  const requestImportStatement = getImportStatement(requestLibPath);
  const serviceGenerator = new ServiceGenerator(
    {
      requestImportStatement,
      enumStyle: 'enum',
      nullable,
      ...rest,
    },
    patchedOpenAPI,
  );
  serviceGenerator.genFile();

  if (mockFolder) {
    await mockGenerator({
      openAPI: patchedOpenAPI,
      mockFolder: mockFolder || './mocks/',
    });
  }
};
