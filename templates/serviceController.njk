// THIS FILE IS AUTO-GENERATED. DO NOT EDIT MANUALLY.
// @ts-ignore
/* eslint-disable */
{{ requestImportStatement }}
import * as Models from './models';

export class {{className}}Service {

{% for api in list -%}
/** {{ api.desc if api.desc else '此处后端没有提供注释' }} {{api.method | upper}} {{ api.pathInComment | safe }} */
static async {{ api.functionName }}(
{%- if api.params and api.hasParams %}
  params: Models.{{api.typeName}},
{%- endif -%}
{%- if api.body -%}
  body: {% if api.body.propertiesList %}Models.{{api.body.type}}{% else %}{{ api.body.type }}{% endif %},
{%- endif -%}
{%- if api.file -%}
{%- for file in api.file -%}
{{file.title | safe}}: File{{ "[]" if file.multiple }},
{%- endfor -%}
{%- endif -%}
  options?: RequestOptions
): Promise<{{api.response.type}}> {
  {% if api.params and api.params.path -%}
  const { {% for param in api.params.path %}'{{ param.name }}': {{ param.alias }}, {% endfor %}
  {% if api.params.path -%}
  ...queryParams
  {% endif -%}
  } = params;
  {% endif -%}
  {% if api.hasFormData -%}
  const formData = new FormData();
  {% if api.file -%}
  {% for file in api.file %}
  if({{file.title | safe}}){
  {% if file.multiple %}
  {{file.title | safe}}.forEach(f => formData.append('{{file.title | safe}}', f || ''));
  {% else %}
  formData.append('{{file.title | safe}}', {{file.title | safe}})
  {% endif %}
  }
  {% endfor %}
  {%- endif -%}
  {% if api.body %}
  Object.keys(body).forEach(ele => {
    {% if genType === "ts" %}
    const item = (body as any)[ele];
    {% else %}
    const item = body[ele];
    {% endif %}
    if (item !== undefined && item !== null) {
      {% if genType === "ts" %}
      if (typeof item === 'object' && !(item instanceof File)) {
        if (item instanceof Array) {
          item.forEach((f) => formData.append(ele, f || ''));
        } else {
          formData.append(ele, JSON.stringify(item));
        }
      } else {
        formData.append(ele, item);
      }
      {% else %}
      formData.append(ele, typeof item === 'object' ? JSON.stringify(item) : item);
      {% endif %}
    }
  });
  {% endif %}
  {% endif -%}
  
  return request<{{api.response.type}}>({
    url: `{{ api.path }}`,
    method: '{{ api.method | upper }}',
    {%- if api.hasHeader and api.body.mediaType not in ["multipart/form-data", "application/x-www-form-urlencoded"]%}
    headers: {
      {%- if api.body.mediaType %}
      'Content-Type': '{{ api.body.mediaType | safe }}',
      {%- endif %}
    },
    {%- endif %}
    {%- if api.params and api.hasParams %}
    params: {
      ...{{ 'queryParams' if api.params and api.params.path else 'params' }},
      {%- for query in api.params.query %}
        {%- if query.isComplexType %}
          '{{query.name | safe}}': undefined,
          ...{{ 'queryParams' if api.params and api.params.path else 'params' }}['{{query.name | safe}}'],
        {%- endif %}
      {%- endfor -%}
    },
    {%- endif %}
    {%- if api.hasFormData %}
    data: formData,
    {%- if api.body.mediaType === "multipart/form-data" %}
    headers: { 'Content-Type': 'multipart/form-data' },
    {%- endif %}
    {%- else %}
    {%- if api.body %}
    data: body,
    {%- endif %}
    {%- endif %}
    ...(options || {}),
  });
}

{% endfor -%}
}

// 请求选项类型
export interface RequestOptions {
  [key: string]: any;
}